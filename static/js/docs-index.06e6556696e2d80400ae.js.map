{"version":3,"sources":["D:/personal/githubrepo/theme/docs/index.mdx"],"names":["layoutProps","MDXLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"sWAYMA,EAAc,GAGdC,EAAY,UACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACH,EAAD,iBAAeD,EAAiBI,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,iBAAQ,CACN,GAAM,4BADR,4BAGA,wJAAwC,+BAAGC,WAAW,KAAQ,CAC1D,KAAQ,2DAD4B,qBAAxC,wBAIA,iBAAQ,CACN,GAAM,gBADR,gBAGA,uGACA,sBACE,kBAAIA,WAAW,MAAf,qBAEF,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,uCAIL,sBACE,kBAAIA,WAAW,MAAf,sBAEF,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,6BAIL,iBAAQ,CACN,GAAM,kCADR,kCAGA,kGAA+B,0BAAYA,WAAW,KAAvB,gBAA/B,0SACA,yHACA,sBACE,kBAAIA,WAAW,MAAf,6NAAmE,+BAAGA,WAAW,MAAS,CACtF,KAAQ,+DADuD,4BAGnE,kBAAIA,WAAW,MAAf,+JACA,kBAAIA,WAAW,MAAf,8BACA,kBAAIA,WAAW,MAAf,wDACA,kBAAIA,WAAW,MAAf,yBAEF,8GACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,0FAML,8SAA4D,0BAAYA,WAAW,KAAvB,WAA5D,sMAEA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,6YAaL,oFAAiB,0BAAYA,WAAW,KAAvB,QAAjB,mDAA6E,0BAAYA,WAAW,KAAvB,SAA7E,+DAA4I,0BAAYA,WAAW,KAAvB,QAA5I,iFAA6M,+BAAGA,WAAW,KAAQ,CAC/N,KAAQ,+DADiM,2BAA7M,gRAIA,gGAAmB,0BAAYA,WAAW,KAAvB,mBAAnB,2BAAsF,0BAAYA,WAAW,KAAvB,WAAtF,2BAAiJ,0BAAYA,WAAW,KAAvB,UAAjJ,sBAA2M,0BAAYA,WAAW,KAAvB,aAA3M,SAAqQ,0BAAYA,WAAW,KAAvB,SAArQ,SAA2T,0BAAYA,WAAW,KAAvB,WAA3T,SAAmX,0BAAYA,WAAW,KAAvB,QAAnX,UAAya,0BAAYA,WAAW,KAAvB,WAAza,SAAie,0BAAYA,WAAW,KAAvB,UAAje,oLAEA,yKACA,iBAAQ,CACN,GAAM,0DADR,0DAGA,yZACA,sBACE,kBAAIA,WAAW,MAAf,4BACA,kBAAIA,WAAW,MAAf,sBACA,kBAAIA,WAAW,MAAf,kCACA,kBAAIA,WAAW,MAAf,4BACA,kBAAIA,WAAW,MAAf,gBACA,kBAAIA,WAAW,MAAf,4BACA,kBAAIA,WAAW,MAAf,gBACA,kBAAIA,WAAW,MAAf,qBAEF,gGAAmB,0BAAYA,WAAW,KAAvB,qBAAnB,sBACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,sgBAeL,6eACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,omBAoBL,iBAAQ,CACN,GAAM,0EADR,0EAGA,6IACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,mOAUL,4KACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,mH,qKAaTJ,EAAWK,gBAAiB","file":"static/js/docs-index.cd7bf0d2.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"主题定制\"\n    }}>{`主题定制`}</h1>\n    <p>{`@sinoui/theme 主要提供了主题定制的基本对象，需要结合`}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/styled-components/styled-components\"\n      }}>{`styled-components`}</a>{`\n使用。`}</p>\n    <h2 {...{\n      \"id\": \"安装\"\n    }}>{`安装`}</h2>\n    <p>{`执行以下命令即可快速安装：`}</p>\n    <ul>\n      <li parentName=\"ul\">{`使用 npm`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`npm install --save @sinoui/theme\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`使用 yarn`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`yarn add @sinoui/theme\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"自定义主题\"\n    }}>{`自定义主题`}</h2>\n    <p>{`@sinoui/theme 提供了默认的主题对象`}<inlineCode parentName=\"p\">{`defaultTheme`}</inlineCode>{`。但在实际开发过程中，默认主题可能不满足我们的需求，此时就需要我们自定义主题以满足主题切换的效果。`}</p>\n    <p>{`主题对象主要包括以下可定制的点：`}</p>\n    <ul>\n      <li parentName=\"ul\">{`palette 调色板。包括字体颜色、背景色、分隔符颜色等。调色板中色系的色值可以参考`}<a parentName=\"li\" {...{\n          \"href\": \"https://material.io/design/color/#tools-for-picking-colors\"\n        }}>{`Material Design | color`}</a></li>\n      <li parentName=\"ul\">{`typography 字体。包括字体大小、字体类型、字重、字体颜色等。`}</li>\n      <li parentName=\"ul\">{`shadows 阴影。`}</li>\n      <li parentName=\"ul\">{`transitions css 变换表达式。`}</li>\n      <li parentName=\"ul\">{`spacing 间距`}</li>\n    </ul>\n    <p>{`我们可以调用 createTheme 来创建主题：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { createTheme } from '@sinoui/theme';\n\nconst theme = createTheme(options);\n`}</code></pre>\n    <p>{`上述示例中，options 表示自定义主题配置，其中可包含上述提到的所有主题定制的点。例如我们需要把主色系`}<inlineCode parentName=\"p\">{`primary`}</inlineCode>{`改成粉色，背景色变成暗色，只需要按照\n下面的方式重新创建主题即可：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { createTheme, createPalette } from '@sinoui/theme';\nimport { pink, green } from '@sinoui/theme/colors';\n\nconst theme = createTheme({\n  palette: createPalette({\n    type: 'dark', //渲染黑色背景，\n    primary: pink, // 将主色调设定为\\`pink\\`\n    accent: green, //将强调色设为绿色\n  }),\n});\n`}</code></pre>\n    <p>{`上述示例中，我们指定`}<inlineCode parentName=\"p\">{`pink`}</inlineCode>{`色系为主题色系，`}<inlineCode parentName=\"p\">{`green`}</inlineCode>{`色系为强调色，背景为`}<inlineCode parentName=\"p\">{`dark`}</inlineCode>{`。在我们的主题色系中，有跟`}<a parentName=\"p\" {...{\n        \"href\": \"https://material.io/design/color/#tools-for-picking-colors\"\n      }}>{`Material Design | color`}</a>{`同样的色系可供选择，背景色有亮色和暗色可选，关于背景色的定制，只需要改变\npalette 的 type 属性即可。`}</p>\n    <p>{`主题定制部分我们不仅支持`}<inlineCode parentName=\"p\">{`Material Design`}</inlineCode>{`的主色调`}<inlineCode parentName=\"p\">{`primary`}</inlineCode>{`和辅色调`}<inlineCode parentName=\"p\">{`accent`}</inlineCode>{`,还支持`}<inlineCode parentName=\"p\">{`bootstrap`}</inlineCode>{`的`}<inlineCode parentName=\"p\">{`error`}</inlineCode>{`、`}<inlineCode parentName=\"p\">{`success`}</inlineCode>{`、`}<inlineCode parentName=\"p\">{`info`}</inlineCode>{`、 `}<inlineCode parentName=\"p\">{`warning`}</inlineCode>{`、`}<inlineCode parentName=\"p\">{`danger`}</inlineCode>{`五个色系。\n这些色系所对应的颜色值都可以通过上述方式自定义。`}</p>\n    <p>{`字体、阴影效果、间距等都可以通过上述方式自定义。`}</p>\n    <h2 {...{\n      \"id\": \"组件的主题定制开发\"\n    }}>{`组件的主题定制开发`}</h2>\n    <p>{`如果我们需要对一个组件进行主题定制，首先需要考虑有哪些样式需要主题定制，比如文本颜色、背景色。主题定制主要提供了以下可定制属性：`}</p>\n    <ul>\n      <li parentName=\"ul\">{`文本颜色`}</li>\n      <li parentName=\"ul\">{`背景色`}</li>\n      <li parentName=\"ul\">{`分隔符颜色`}</li>\n      <li parentName=\"ul\">{`字体大小`}</li>\n      <li parentName=\"ul\">{`字重`}</li>\n      <li parentName=\"ul\">{`间距大小`}</li>\n      <li parentName=\"ul\">{`阴影`}</li>\n      <li parentName=\"ul\">{`css 变换`}</li>\n    </ul>\n    <p>{`组件的主题定制，一般结合`}<inlineCode parentName=\"p\">{`styled-components`}</inlineCode>{`使用：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import styled from 'styled-components';\n\nconst Wrapper = styled.div\\`\n  height: 400px;\n  width: 400px;\n  padding: \\${(props) => props.theme.spacing * 2}px; // 定制间距\n  background-color: \\${(props) =>\n    props.theme.palette.background.paper}; //定制背景色\n  color: \\${(props) => props.theme.palette.text.primary}; // 定制字体颜色\n  font-size: \\${(props) =>\n    props.theme.typography.body1.fontSize}; // 定制字体大小\n\\`;\n`}</code></pre>\n    <p>{`如果色系中的颜色都不满足需求，我们也可以自定义文本颜色，但在自定义时一定要考虑在明亮和黑色背景下文本颜色是否需要改变。如果需要改变，可以按照下面的方式定制：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import styled from 'styled-components';\n\nconst fontColor = {\n  light: 'rgba(0,0,0,0.54)',\n  dark: 'rgba(255,255,255,0.6)',\n};\n\nconst Wrapper = styled.div\\`\n  height: 400px;\n  width: 400px;\n  padding: \\${(props) => props.theme.spacing * 2}px; // 定制间距\n  background-color: \\${(props) =>\n    props.theme.palette.background.paper}; //定制背景色\n  color: \\${(props) => fontColor[props.theme.palette.type]}; // 定制字体颜色\n  font-size: \\${(props) =>\n    props.theme.typography.body1.fontSize}; // 定制字体大小\n\\`;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"主题定制的-ts-语法提示支持\"\n    }}>{`主题定制的 ts 语法提示支持`}</h2>\n    <p>{`在 @types 中创建 theme-styled-components/index.d.ts 文件，内容如下：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`/* eslint-disable @typescript-eslint/no-empty-interface */\nimport 'styled-components';\nimport { Theme } from '@sinoui/theme';\n\ndeclare module 'styled-components' {\n  export interface DefaultTheme extends Theme {}\n}\n`}</code></pre>\n    <p>{`然后在项目根目录中的 tsconfig.json 中自动导入上面定义的 .d.ts。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"compilerOptions\": {\n    \"types\": [\"theme-styled-components\"],\n    \"typeRoots\": [\"./@types\"]\n  }\n}\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}