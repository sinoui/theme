{"version":3,"sources":["D:/Users/jacki/Documents/GitHub/theme/docs/components/ItemDemo.tsx","D:/Users/jacki/Documents/GitHub/theme/docs/components/PaletteGenerator.tsx","D:/Users/jacki/Documents/GitHub/theme/docs/guide/handle-color-by-polished.mdx"],"names":["OpacifyItem","styled","div","props","theme","shadows","opacify","palette","primary","main","Item","transitions","create","ItemDemo","useOpacify","useContext","ThemeContext","useState","isHover","setIsHover","onMouseEnter","onMouseLeave","lighten","num","colorStr","color","parseToHsl","lightness","toColorString","darken","ColorItem","Wrapper","PaletteGenerator","primaryColor","colors","map","name","key","style","background","getContrastText","layoutProps","MDXContent","components","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"static/js/docs-guide-handle-color-by-polished.0191e0b4.js","sourcesContent":["import React, { useContext, useState } from 'react';\nimport styled, { ThemeContext } from 'styled-components';\nimport { opacify } from 'polished';\n\nconst OpacifyItem = styled.div`\n  padding: 16px;\n  box-shadow: ${(props) => props.theme.shadows[2]};\n  border-radius: 4px;\n\n  background-color: ${({ theme }) =>\n    opacify(-0.88, theme.palette.primary.main)};\n\n  &:hover {\n    background-color: ${({ theme }) =>\n      opacify(-0.76, theme.palette.primary.main)};\n  }\n`;\n\nconst Item = styled.div`\n  position: relative;\n  overflow: hidden;\n  padding: 16px;\n  box-shadow: ${(props) => props.theme.shadows[2]};\n  border-radius: 4px;\n\n  &::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    width: 100%;\n    height: 100%;\n    pointer-events: none;\n    z-index: 1;\n\n    background-color: ${({ theme: { palette } }) => palette.primary.main};\n    opacity: 0.12;\n\n    transition: ${(props) =>\n      props.theme.transitions.create(['background-color', 'opacity'])};\n  }\n\n  &:hover::before {\n    opacity: 0.24;\n  }\n`;\n\nexport default function ItemDemo({ useOpacify }: { useOpacify?: boolean }) {\n  const theme = useContext(ThemeContext);\n  const [isHover, setIsHover] = useState(false);\n  return useOpacify ? (\n    <OpacifyItem\n      onMouseEnter={() => setIsHover(true)}\n      onMouseLeave={() => setIsHover(false)}\n    >\n      <p>\n        color: {opacify(isHover ? -0.76 : -0.88, theme.palette.primary.main)}\n      </p>\n      <p>是否悬浮状态：{isHover ? '是' : '否'}</p>\n    </OpacifyItem>\n  ) : (\n    <Item\n      onMouseEnter={() => setIsHover(true)}\n      onMouseLeave={() => setIsHover(false)}\n    >\n      <p>color: {theme.palette.primary.main}</p>\n      <p>opacity: {isHover ? 0.24 : 0.12}</p>\n      <p>是否悬浮状态：{isHover ? '是' : '否'}</p>\n    </Item>\n  );\n}\n","import React, { useContext } from 'react';\nimport styled, { ThemeContext } from 'styled-components';\nimport { parseToHsl, toColorString } from 'polished';\n\nfunction lighten(num: number, colorStr: string) {\n  const color = parseToHsl(colorStr);\n\n  color.lightness += (1 - color.lightness) * num;\n  return toColorString(color);\n}\n\nfunction darken(num: number, colorStr: string) {\n  const color = parseToHsl(colorStr);\n  color.lightness *= 1 - num;\n  return toColorString(color);\n}\n\nconst ColorItem = styled.div`\n  display: inline-block;\n  width: 80px;\n  height: 80px;\n`;\n\nconst Wrapper = styled.div`\n  display: flex;\n`;\n\nconst genPalette = (color: string) => {\n  return [\n    ['50', lighten(0.84, color)],\n    ['100', lighten(0.62, color)],\n    ['200', lighten(0.42, color)],\n    ['300', lighten(0.26, color)],\n    ['400', lighten(0.12, color)],\n    ['500', color],\n    ['600', darken(0.14, color)],\n    ['700', darken(0.24, color)],\n    ['800', darken(0.3, color)],\n    ['900', darken(0.45, color)],\n  ];\n};\n\nexport default function PaletteGenerator() {\n  const theme = useContext(ThemeContext);\n  const primaryColor = theme.palette.primary.main;\n  const colors = genPalette(primaryColor);\n\n  return (\n    <Wrapper>\n      {colors.map(([name, color]) => (\n        <ColorItem\n          key={name}\n          style={{\n            background: color,\n            color: theme.palette.getContrastText(color),\n          }}\n        >\n          {name}\n        </ColorItem>\n      ))}\n    </Wrapper>\n  );\n}\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { lighten, parseToHsl, opacify } from 'polished';\nimport purple from '../../src/colors/purple';\nimport ItemDemo from '@/ItemDemo';\nimport PaletteGenerator from '@/PaletteGenerator';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"使用-polished-处理颜色\"\n    }}>{`使用 polished 处理颜色`}</h1>\n    <p>{`@sinoui/theme 只为我们提供了有限的几种标准颜色，但是在组件开发时，往往需要从这些标准颜色衍生出更深或者更浅的颜色，应用于特定的用户界面元素上。推荐您使用 `}<a parentName=\"p\" {...{\n        \"href\": \"https://polished.js.org/\"\n      }}>{`polished.js`}</a>{` 来生成这些颜色。以下教程会详细介绍几个重点方法来处理颜色需求。`}</p>\n    <h2 {...{\n      \"id\": \"透明度\"\n    }}>{`透明度`}</h2>\n    <p>{`Material Design 常用透明度表示元素状态切换。有两种方式实现半透明背景：`}</p>\n    <ul>\n      <li parentName=\"ul\">{`使用 polished/opacify 直接生不同透明度的背景色`}</li>\n      <li parentName=\"ul\">{`使用 CSS 伪元素，它的背景色是不带透明度的颜色值，且本身应用透明度值`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"polishedopacify\"\n    }}>{`polished/opacify()`}</h3>\n    <p><inlineCode parentName=\"p\">{`opacify(amount, mainColor)`}</inlineCode>{` 方法是用来增加颜色的不透明度的。如：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { opacify } from 'polished';\n\nconst color = opacify(0.2, 'rgb(12, 32, 12, .1)');\n\n// color = rgba(12, 32, 12, .3);\n`}</code></pre>\n    <p>{`往往我们是要给不带透明度的颜色添加上不透明度值，例如设置不透明度为 20%，正确的写法是：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { opacify } from 'polished';\n\nconst color = opacify(-0.8, 'rgb(12, 32, 12)');\n\n// color = rgba(12, 32, 12, 0.2);\n`}</code></pre>\n    <p>{`注意，`}<inlineCode parentName=\"p\">{`amount`}</inlineCode>{` 等于 `}<inlineCode parentName=\"p\">{`-0.8`}</inlineCode>{`，因为 `}<inlineCode parentName=\"p\">{`rgb(12, 32, 12)`}</inlineCode>{` 等价于 `}<inlineCode parentName=\"p\">{`rgba(12, 32, 12, 1)`}</inlineCode>{`，不透明度为 1。`}</p>\n    <h3 {...{\n      \"id\": \"css-伪类\"\n    }}>{`css 伪类`}</h3>\n    <p>{`可以用 css 伪类，来模拟出透明的背景色。这个 css 伪类：`}</p>\n    <ul>\n      <li parentName=\"ul\">{`背景色是不带透明度的颜色`}</li>\n      <li parentName=\"ul\">{`指定不透明度`}</li>\n    </ul>\n    <p>{`例如：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import styled from 'styled-components';\n\nconst Item = styled.div\\`\n  position: relative;\n  overflow: hidden;\n\n  &::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    width: 100%;\n    height: 100%;\n    pointer-events: none;\n    z-index: 1;\n\n    background-color: \\${({ theme: { palette } }) => palette.primary.main};\n    opacity: 0.12;\n\n    transition: \\${(props) =>\n      props.theme.transitions.create(['background-color', 'opacity'])};\n  }\n\n  &:hover::before {\n    opacity: 0.24;\n  }\n\\`;\n`}</code></pre>\n    <p>{`对比一下两种方式的效果：`}</p>\n    <p>{`方式一，使用 opacify 函数：`}</p>\n    <ItemDemo useOpacify mdxType=\"ItemDemo\" />\n    <p>{`方式二，使用 css 伪类：`}</p>\n    <ItemDemo mdxType=\"ItemDemo\" />\n    <h2 {...{\n      \"id\": \"深浅色\"\n    }}>{`深浅色`}</h2>\n    <p>{`@sinoui/theme 中的每种颜色都有四个属性：`}</p>\n    <ul>\n      <li parentName=\"ul\">{`main`}</li>\n      <li parentName=\"ul\">{`light`}</li>\n      <li parentName=\"ul\">{`dark`}</li>\n      <li parentName=\"ul\">{`contrastText`}</li>\n    </ul>\n    <p>{`如果需要更深或者更浅的颜色，需要使用 polished 中的 `}<inlineCode parentName=\"p\">{`darken()`}</inlineCode>{` 和 `}<inlineCode parentName=\"p\">{`lighten()`}</inlineCode>{` 方法来生成：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { darken } from 'polished';\n\nconst darkerColor = darken(0.2, theme.palette.primary.main);\n`}</code></pre>\n    <p>{`可以通过 darken, lighten 函数近似生成 Material Design 的调色板颜色：`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`调色板明暗程度`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`生成方法`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`50`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`lighten(0.84, mainColor)`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`100`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`lighten(0.62, mainColor)`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`200`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`lighten(0.42, mainColor)`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`300`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`lighten(0.26, mainColor)`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`400`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`lighten(0.12, mainColor)`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`500`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`mainColor`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`600`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`darken(0.14, mainColor)`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`700`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`darken(0.2, mainColor)`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`800`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`darken(0.3, mainColor)`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`900`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`darken(0.45, mainColor)`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p>{`主颜色对应的生成调色板如下：`}</p>\n    <PaletteGenerator mdxType=\"PaletteGenerator\" />\n    <h2 {...{\n      \"id\": \"文本颜色\"\n    }}>{`文本颜色`}</h2>\n    <p>{`文本颜色与背景颜色的对比度非常重要，因为需要确保在有颜色背景上的文字是清晰可见的、易读的。`}<a parentName=\"p\" {...{\n        \"href\": \"https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast-contrast.html\"\n      }}>{`WCAG 2.0`}</a>{` 规定文本颜色对比度至少满足 `}<strong parentName=\"p\">{`3:1`}</strong>{`。@sinoui/theme 基于 polished 方法提供了 `}<inlineCode parentName=\"p\">{`theme.palette.getContrastText(backgroundColor)`}</inlineCode>{` 方法来获取文本颜色。`}</p>\n    <p>{`例如：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const AppBar = styled.div\\`\n  background-color: \\${({ theme: { palette } }) => palette.primary.main};\n  color: \\${({\n    theme: {\n      palette: { primary, getContrastText },\n    },\n  }) => getContrastText(primary.main)};\n\\`;\n`}</code></pre>\n    <p>{`另外，@sinoui/theme 调色板中每个颜色对象都有 `}<inlineCode parentName=\"p\">{`contrastText`}</inlineCode>{` 属性，此属性即是此颜色背景上文字颜色。上面的示例可以简化为：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const AppBar = styled.div\\`\n  background-color: \\${({ theme: { palette } }) => palette.primary.main};\n  color: \\${({ theme: { palette } }) => palette.primary.contrastText};\n\\`;\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}