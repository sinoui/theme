{"version":3,"sources":["D:/Users/jacki/Documents/GitHub/theme/docs/components/Col.ts","D:/Users/jacki/Documents/GitHub/theme/docs/components/ColorPalettes.tsx","D:/Users/jacki/Documents/GitHub/theme/docs/components/Row.ts","D:/Users/jacki/Documents/GitHub/theme/docs/guide/images/color-tool-default-theme.png","D:/Users/jacki/Documents/GitHub/theme/docs/components/palette/Card.tsx","D:/Users/jacki/Documents/GitHub/theme/docs/components/color-desc-list/ColorDescItem.tsx","D:/Users/jacki/Documents/GitHub/theme/docs/components/color-desc-list/ColorDescList.tsx","D:/Users/jacki/Documents/GitHub/theme/docs/components/color-desc-list/index.ts","D:/Users/jacki/Documents/GitHub/theme/docs/components/palette/PaletteColorDesc.tsx","D:/Users/jacki/Documents/GitHub/theme/docs/components/TextOnPrimaryDemo.tsx","D:/Users/jacki/Documents/GitHub/theme/docs/components/palette/TypeColorDesc.tsx","D:/Users/jacki/Documents/GitHub/theme/docs/guide/palette.mdx"],"names":["widthCss","css","props","width","xs","breakpointKeys","breakpointsCss","filter","item","reduce","result","theme","breakpoints","maxWidth","flexBasis","Col","styled","div","colorNameMap","red","pink","purple","deepPurple","indigo","blue","lightBlue","cyan","teal","green","lightGreen","lime","yellow","amber","orange","deepOrange","brown","grey","blueGrey","variants","ColorTagHeadWrapper","getContrastText","color","getContrast","ColorTagHead","title","shade","style","backgroundColor","marginBottom","display","justifyContent","replace","text","toLowerCase","toUpperCase","toWords","ColorTagWrapper","ColorTag","Sep","ColorModuleWrapper","ColorModule","name","filteredVariants","map","key","ColorPalettesWrapper","ColorPalettes","Object","keys","colors","startsWith","black","light","white","horizontalGutterStyle","gutter","gutterStyle","Row","Array","isArray","module","exports","Card","palette","darkMode","H6","h6","borderColors","borderCss","borderColor","border","ColorPiece","ColorDescItem","margin","marginLeft","fontSize","H5","h5","ColorDescList","items","sm","md","shades","categories","PaletteColorDesc","createPalette","category","TextOnPrimaryDemo","primary","dark","background","main","borderRadius","padding","contrastText","TypeColorDesc","type","typeColor","layoutProps","MDXContent","components","mdxType","parentName","alt","src","require","isMDXComponent"],"mappings":"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","file":"static/js/docs-guide-palette.6d235409.js","sourcesContent":["import styled, { css } from 'styled-components';\nimport { Theme } from '../../src/types';\n\ntype Width =\n  | 1\n  | 2\n  | 3\n  | 4\n  | 5\n  | 6\n  | 7\n  | 8\n  | 9\n  | 10\n  | 11\n  | 12\n  | 13\n  | 14\n  | 15\n  | 16\n  | 17\n  | 18\n  | 19\n  | 20\n  | 21\n  | 22\n  | 23\n  | 24;\n\ninterface Props {\n  xs?: Width;\n  sm?: Width;\n  md?: Width;\n  lg?: Width;\n  xl?: Width;\n}\n\nconst widthCss = css((props: Props) => {\n  const width = props.xs;\n\n  if (width > 0) {\n    return `\n      max-width: ${(width / 24) * 100}%;\n      flex-basis: ${(width / 24) * 100}%;\n      flex-grow: 0;\n    `;\n  }\n  return null;\n});\n\nconst breakpointKeys = ['sm', 'md', 'lg', 'xl'];\n\nconst breakpointsCss = css((props: Props & { theme: Theme }) => {\n  return breakpointKeys\n    .filter((item) => props[item] > 0)\n    .reduce((result, item) => {\n      // eslint-disable-next-line no-param-reassign\n      result[\n        `@media screen and (min-width: ${props.theme.breakpoints[item]}px)`\n      ] = {\n        '&': {\n          width: `${(props[item] / 24) * 100}%`,\n          maxWidth: `${(props[item] / 24) * 100}%`,\n          flexBasis: `${(props[item] / 24) * 100}%`,\n        },\n      };\n      return result;\n    }, {} as any);\n});\n\nconst Col = styled.div<Props>`\n  flex-grow: 1;\n  ${widthCss}\n  ${breakpointsCss}\n\n  box-sizing: border-box;\n  margin: 0;\n`;\n\nexport default Col;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { getContrast } from 'polished';\nimport * as colors from '../../src/colors';\nimport { ColorSeries } from '../../src/types';\n\nconst TextOnDarkColor = '#fff';\nconst TextOnLightColor = 'rgba(0, 0, 0, 0.87)';\n\nconst colorNameMap = {\n  red: '红色',\n  pink: '粉红色',\n  purple: '紫色',\n  deepPurple: '深紫色',\n  indigo: '靛青色',\n  blue: '蓝色',\n  lightBlue: '浅蓝色',\n  cyan: '青色',\n  teal: '蓝绿色',\n  green: '绿色',\n  lightGreen: '浅绿色',\n  lime: '柠檬色',\n  yellow: '黄色',\n  amber: '琥珀色',\n  orange: '橙色',\n  deepOrange: '深橙色',\n  brown: '棕色',\n  grey: '灰色',\n  blueGrey: '蓝灰色',\n};\n\nconst variants = [\n  50,\n  100,\n  200,\n  300,\n  400,\n  500,\n  600,\n  700,\n  800,\n  900,\n  'A100',\n  'A200',\n  'A400',\n  'A700',\n];\n\nconst ColorTagHeadWrapper = styled.div`\n  padding: 10px 15px 11px;\n  border: 1px solid rgba(0, 0, 0, 0.12);\n  margin: 0;\n  font-size: 16px;\n  font-weight: 500;\n`;\n\nconst toWords = (title: string) =>\n  title\n    .replace(/[A-Z]/g, (text) => ` ${text.toLowerCase()}`)\n    .replace(/^[a-z]/, (text) => text.toUpperCase());\n\nfunction getContrastText(color: string) {\n  return getContrast(color, TextOnDarkColor) >= 3\n    ? TextOnDarkColor\n    : TextOnLightColor;\n}\n\n/**\n * 颜色标签头\n */\nfunction ColorTagHead({\n  title,\n  color,\n  shade,\n}: {\n  title: string;\n  color: string;\n  shade: string;\n}) {\n  return (\n    <ColorTagHeadWrapper\n      style={{\n        color: getContrastText(color),\n        backgroundColor: color,\n      }}\n    >\n      <div\n        style={{\n          marginBottom: 32,\n          display: 'flex',\n          justifyContent: 'space-between',\n        }}\n      >\n        <span>{toWords(title)}</span>\n        <span>{colorNameMap[title]}</span>\n      </div>\n      <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n        <span>{shade}</span>\n        <span>{color.toUpperCase()}</span>\n      </div>\n    </ColorTagHeadWrapper>\n  );\n}\n\nconst ColorTagWrapper = styled(ColorTagHeadWrapper)`\n  & + & {\n    margin-top: -1px;\n  }\n\n  display: flex;\n  justify-content: space-between;\n`;\n\n/**\n * 颜色标签\n */\nfunction ColorTag({ title, color }: { title: string; color: string }) {\n  return (\n    <ColorTagWrapper\n      style={{\n        backgroundColor: color,\n        color: getContrastText(color),\n      }}\n    >\n      <span>{title}</span>\n      <span>{color.toUpperCase()}</span>\n    </ColorTagWrapper>\n  );\n}\n\nconst Sep = styled.div`\n  height: 4px;\n`;\n\nconst ColorModuleWrapper = styled.div`\n  padding: 8px 20px;\n  flex: 0 1 100%;\n  box-sizing: border-box;\n\n  @media screen and (max-width: 920px) and (min-width: 521px) {\n    flex-basis: 100%;\n  }\n\n  @media screen and (min-width: 521px) {\n    flex-basis: 33.33%;\n    max-width: 33.33%;\n  }\n`;\n\n/**\n * 颜色模块\n */\nfunction ColorModule({ color, name }: { color: ColorSeries; name: string }) {\n  const filteredVariants = variants\n    .map((item) => ({ name: item, color: color[item] }))\n    .filter((item) => !!item.color);\n  return (\n    <ColorModuleWrapper>\n      <ColorTagHead shade=\"500\" color={color[500]} title={name} />\n      <Sep />\n      {filteredVariants\n        .filter((item) => typeof item.name === 'number')\n        .map((item) => (\n          <ColorTag color={item.color} key={item.name} title={`${item.name}`} />\n        ))}\n      <Sep />\n      {filteredVariants\n        .filter((item) => typeof item.name !== 'number')\n        .map((item) => (\n          <ColorTag color={item.color} key={item.name} title={`${item.name}`} />\n        ))}\n    </ColorModuleWrapper>\n  );\n}\n\nconst ColorPalettesWrapper = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n`;\n\n/**\n * 颜色调色板\n */\nexport default function ColorPalettes() {\n  return (\n    <ColorPalettesWrapper>\n      {Object.keys(colors)\n        .filter(\n          (item) => !!(colors[item] as any)[50] && !item.startsWith('color'),\n        )\n        .map((item) => ({ name: item, color: colors[item] }))\n        .map((item) => (\n          <ColorModule key={item.name} name={item.name} color={item.color} />\n        ))}\n      <ColorModuleWrapper>\n        <ColorTag title=\"Black\" color={colors.common.black} light />\n        <ColorTag title=\"White\" color={colors.common.white} light={false} />\n      </ColorModuleWrapper>\n    </ColorPalettesWrapper>\n  );\n}\n","import styled, { css } from 'styled-components';\n\ninterface Props {\n  gutter?: number | [number, number];\n}\n\nconst horizontalGutterStyle = css<{ gutter: number }>`\n  width: calc(100% + ${({ gutter }) => gutter}px);\n  margin: 0px -${({ gutter }) => gutter / 2}px;\n  & > * {\n    padding: 0 ${({ gutter }) => gutter / 2}px;\n  }\n`;\n\nconst gutterStyle = css<{ gutter: [number, number] }>`\n  width: calc(100% + ${({ gutter }) => gutter[0]}px);\n  margin: -${({ gutter }) => gutter[1] / 2} -${({ gutter }) => gutter[0] / 2}px;\n\n  & > * {\n    padding: ${({ gutter }) => gutter[1] / 2}px\n      ${({ gutter }) => gutter[0] / 2}px;\n  }\n`;\n\nconst Row = styled.div<Props>`\n  display: flex;\n  flex-wrap: wrap;\n  box-sizing: border-box;\n  ${({ gutter }) =>\n    typeof gutter === 'number'\n      ? horizontalGutterStyle\n      : Array.isArray(gutter) && gutterStyle};\n`;\n\nexport default Row;\n","module.exports = __webpack_public_path__ + \"static/img/color-tool-default-theme.d5df5b9a.png\";","import styled from 'styled-components';\n\nconst Card = styled.div<{\n  darkMode?: boolean;\n}>`\n  border-radius: 4px;\n  color: rbga(0, 0, 0, 0.87);\n  padding: 16px;\n  margin: 16px 0;\n  background: ${({ theme }) => theme.palette.grey[100]};\n  ${({ darkMode }) =>\n    darkMode &&\n    `\n    background-color: #303030;\n    color: #fff;\n  `}\n`;\n\nexport default Card;\n","import React from 'react';\nimport styled, { css } from 'styled-components';\n\nconst H6 = styled.h6`\n  font-size: 14px;\n  line-height: 1.1em;\n  margin: 6px 0;\n  font-weight: 400;\n`;\n\nconst borderColors = {\n  '#303030': 'rgba(255, 255, 255, 0.12)',\n  '#fafafa': 'rgba(0, 0, 0, 0.12)',\n};\n\nconst borderCss = css(({ color }: { color: string }) => {\n  const borderColor = borderColors[color];\n  const border = borderColor ? `1px solid ${borderColor}` : '';\n  return border ? { border } : null;\n});\n\nconst ColorPiece = styled.div<{ color: string }>`\n  display: inline-block;\n  width: 48px;\n  height: 48px;\n  border-radius: 4px;\n  background-color: ${(props) => props.color};\n  ${borderCss};\n`;\n\n/**\n * 介绍颜色的项目\n */\nexport default function ColorDescItem({\n  name,\n  color,\n}: {\n  name: string;\n  color: string;\n}) {\n  return (\n    <div style={{ display: 'flex', margin: '8px 0' }}>\n      <ColorPiece color={color} />\n      <div\n        style={{\n          marginLeft: 8,\n        }}\n      >\n        <H6>{name}</H6>\n        <span style={{ fontSize: 13 }}>{color}</span>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport Row from '../Row';\nimport Col from '../Col';\nimport ColorDescItem from './ColorDescItem';\n\ninterface Props {\n  dark?: boolean;\n  title: string;\n  items: {\n    name: string;\n    color: string;\n  }[];\n}\n\nconst H5 = styled.h5`\n  font-size: 18px;\n  line-height: 1.2em;\n  margin: 8px 0;\n  font-weight: 400;\n`;\n\n/**\n * 描述一组颜色的列表\n */\nexport default function ColorDescList({ items, title }: Props) {\n  return (\n    <div>\n      <H5>{title}</H5>\n      <Row>\n        {items.map((item) => (\n          <Col key={item.name} xs={24} sm={12} md={8}>\n            <ColorDescItem name={item.name} color={item.color} />\n          </Col>\n        ))}\n      </Row>\n    </div>\n  );\n}\n","import ColorDescList from './ColorDescList';\n\nexport default ColorDescList;\n","import React from 'react';\nimport createPalette from '../../../src/createPalette';\nimport Card from './Card';\nimport ColorDescList from '../color-desc-list';\n\nconst shades = ['light', 'main', 'dark'];\nconst categories = [\n  'primary',\n  'secondary',\n  'error',\n  'warning',\n  'info',\n  'success',\n];\n\n/**\n * 调色板颜色介绍\n */\nexport default function PaletteColorDesc() {\n  const palette = createPalette();\n\n  return (\n    <Card>\n      {categories.map((category) => (\n        <ColorDescList\n          title={category}\n          key={category}\n          items={shades.map((shade) => ({\n            name: `palette.${category}.${shade}`,\n            color: palette[category][shade],\n          }))}\n        />\n      ))}\n    </Card>\n  );\n}\n","import React from 'react';\nimport createPalette from '../../src/createPalette';\n\nexport default function TextOnPrimaryDemo() {\n  const palette = createPalette();\n  return (\n    <div\n      style={{\n        border: `1px solid ${palette.primary.dark}`,\n        background: palette.primary.main,\n        borderRadius: 4,\n        padding: 8,\n        margin: '16 4',\n        color: palette.primary.contrastText,\n      }}\n    >\n      背景色是 palette.primary.main，文本颜色是 palette.primary.contrastText。\n    </div>\n  );\n}\n","import React from 'react';\nimport Card from './Card';\nimport ColorDescList from '../color-desc-list';\nimport { light, dark } from '../../../src/createPalette';\n\nexport default function TypeColorDesc({\n  type,\n  darkMode,\n  title,\n}: {\n  type: string;\n  darkMode?: boolean;\n  title: string;\n}) {\n  const typeColor = darkMode ? dark[type] : light[type];\n\n  if (typeof typeColor === 'string') {\n    return (\n      <Card darkMode={darkMode}>\n        <ColorDescList\n          items={[\n            {\n              name: `palette.${type}`,\n              color: typeColor,\n            },\n          ]}\n          title={title}\n        />\n      </Card>\n    );\n  }\n\n  const keys = Object.keys(typeColor).filter(\n    (key) => typeof typeColor[key] === 'string',\n  );\n  const items = keys.map((key) => ({\n    name: `palette.${type}.${key}`,\n    color: typeColor[key],\n  }));\n\n  return (\n    <Card darkMode={darkMode}>\n      <ColorDescList items={items} title={title} />\n    </Card>\n  );\n}\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport PaletteColorDesc from '@/palette/PaletteColorDesc';\nimport TextOnPrimaryDemo from '@/TextOnPrimaryDemo';\nimport TypeColorDesc from '@/palette/TypeColorDesc';\nimport ColorPalettes from '@/ColorPalettes';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"调色板\"\n    }}>{`调色板`}</h1>\n    <p>{`您可以通过调色板来统一设置 sinoui 组件的颜色，以契合您的品牌或者 UI 风格。`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#%E9%A2%9C%E8%89%B2%E5%88%86%E7%B1%BB\"\n        }}>{`颜色分类`}</a><ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#%E9%A2%9C%E8%89%B2%E5%B1%9E%E6%80%A7\"\n            }}>{`颜色属性`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#main-%E5%B1%9E%E6%80%A7\"\n            }}>{`main 属性`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"dark-%E5%B1%9E%E6%80%A7\"\n            }}>{`dark 属性`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"light-%E5%B1%9E%E6%80%A7\"\n            }}>{`light 属性`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"contrasttext-%E5%B1%9E%E6%80%A7\"\n            }}>{`contrastText 属性`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#%E9%BB%98%E8%AE%A4%E7%9A%84%E9%A2%9C%E8%89%B2%E5%88%86%E7%B1%BB%E5%80%BC\"\n            }}>{`默认的颜色分类值`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#%E5%88%87%E6%8D%A2%E7%BB%84%E4%BB%B6%E9%A2%9C%E8%89%B2%E5%88%86%E7%B1%BB\"\n            }}>{`切换组件颜色分类`}</a></li>\n        </ul></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#dark-%E6%A8%A1%E5%BC%8F\"\n        }}>{`dark 模式`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#%E6%96%87%E6%9C%AC%E9%A2%9C%E8%89%B2\"\n        }}>{`文本颜色`}</a><ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#light-%E6%A8%A1%E5%BC%8F%E4%B8%8B%E7%9A%84%E6%96%87%E6%9C%AC%E9%A2%9C%E8%89%B2\"\n            }}>{`light 模式下的文本颜色`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#dark-%E6%A8%A1%E5%BC%8F%E4%B8%8B%E7%9A%84%E6%96%87%E6%9C%AC%E9%A2%9C%E8%89%B2\"\n            }}>{`dark 模式下的文本颜色`}</a></li>\n        </ul></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#%E6%8C%89%E9%92%AE%E9%A2%9C%E8%89%B2\"\n        }}>{`按钮颜色`}</a><ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#%E6%8C%89%E9%92%AE%E9%A2%9C%E8%89%B2%E9%80%8F%E6%98%8E%E5%BA%A6\"\n            }}>{`按钮颜色透明度`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#light-%E6%A8%A1%E5%BC%8F%E4%B8%8B%E7%9A%84%E6%8C%89%E9%92%AE%E9%A2%9C%E8%89%B2\"\n            }}>{`light 模式下的按钮颜色`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#dark-%E6%A8%A1%E5%BC%8F%E4%B8%8B%E7%9A%84%E6%8C%89%E9%92%AE%E9%A2%9C%E8%89%B2\"\n            }}>{`dark 模式下的按钮颜色`}</a></li>\n        </ul></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#%E8%83%8C%E6%99%AF%E9%A2%9C%E8%89%B2\"\n        }}>{`背景颜色`}</a><ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#light-%E6%A8%A1%E5%BC%8F%E4%B8%8B%E7%9A%84%E8%83%8C%E6%99%AF%E9%A2%9C%E8%89%B2\"\n            }}>{`light 模式下的背景颜色`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#dark-%E6%A8%A1%E5%BC%8F%E4%B8%8B%E7%9A%84%E8%83%8C%E6%99%AF%E9%A2%9C%E8%89%B2\"\n            }}>{`dark 模式下的背景颜色`}</a></li>\n        </ul></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#%E5%88%86%E5%89%B2%E7%BA%BF%E9%A2%9C%E8%89%B2\"\n        }}>{`分割线颜色`}</a><ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#light-%E6%A8%A1%E5%BC%8F%E4%B8%8B%E7%9A%84%E5%88%86%E5%89%B2%E7%BA%BF%E9%A2%9C%E8%89%B2\"\n            }}>{`light 模式下的分割线颜色`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#dark-%E6%A8%A1%E5%BC%8F%E4%B8%8B%E7%9A%84%E5%88%86%E5%89%B2%E7%BA%BF%E9%A2%9C%E8%89%B2\"\n            }}>{`dark 模式下的分割线颜色`}</a></li>\n        </ul></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#%E5%AE%9A%E5%88%B6%E8%B0%83%E8%89%B2%E6%9D%BF\"\n        }}>{`定制调色板`}</a><ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#%E5%AE%9A%E5%88%B6%E9%A2%9C%E8%89%B2%E5%88%86%E7%B1%BB\"\n            }}>{`定制颜色分类`}</a></li>\n        </ul></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#%E5%86%85%E7%BD%AE%E7%9A%84%E9%A2%9C%E8%89%B2%E5%AF%B9%E8%B1%A1\"\n        }}>{`内置的颜色对象`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#%E5%AE%98%E6%96%B9%E8%89%B2%E5%BD%A9%E5%B7%A5%E5%85%B7\"\n        }}>{`官方色彩工具`}</a></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"颜色分类\"\n    }}>{`颜色分类`}</h2>\n    <p>{`调色板提供了多个颜色分类，以满足不同语义场景下的使用颜色：`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`primary`}</inlineCode>{` - 主颜色，用于为用户界面的主要元素着色`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`secondary`}</inlineCode>{` - 辅助色，用于为用户界面的突出元素着色（如浮动按钮、进度条等）`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`error`}</inlineCode>{` - 错误颜色，用于为用户呈现错误信息的颜色`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`warning`}</inlineCode>{` - 警告颜色，用于表示潜在的危险动作或重要信息（如删除动作）`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`info`}</inlineCode>{` - 提示语颜色，用于表示中立或者不重要的信息`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`success`}</inlineCode>{` - 成功颜色，用于表示用户触发的操作已成功完成`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"颜色属性\"\n    }}>{`颜色属性`}</h3>\n    <p>{`每个颜色分类是一个对象，这个颜色对象有四个属性，即：`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`main`}</inlineCode>{` - 主要用途的颜色值`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`dark`}</inlineCode>{` - 深色变体颜色值`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`light`}</inlineCode>{` - 浅色变体颜色值`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`contrastText`}</inlineCode>{` - 在 main 颜色背景上的文字颜色`}</li>\n    </ul>\n    <p>{`获取四个颜色属性的示例代码（获取主颜色的四个颜色属性）：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`const { main, dark, light, contrastText } = palette.primary;\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"main-属性\"\n    }}>{`main 属性`}</h3>\n    <p>{`每个颜色对象的 main 属性是此颜色分类最重要的颜色值。它用于元素在正常状态下的颜色。如按钮、图标、复选、单选等组件在正常状态下的颜色取的是 `}<inlineCode parentName=\"p\">{`main`}</inlineCode>{` 颜色。`}</p>\n    <h3 {...{\n      \"id\": \"dark-属性\"\n    }}>{`dark 属性`}</h3>\n    <p>{`dark 属性代表的是此颜色分类的深色变体。一般用于：`}</p>\n    <ul>\n      <li parentName=\"ul\">{`鼠标移动到元素上后元素的背景色（即 hover 时的颜色）`}</li>\n      <li parentName=\"ul\">{`有背景色元素的边框`}</li>\n      <li parentName=\"ul\">{`App 中的顶部应用栏`}</li>\n    </ul>\n    <p>{`您也可以通过 `}<a parentName=\"p\" {...{\n        \"href\": \"https://polished.js.org/\"\n      }}>{`polished`}</a>{` 的方法来获取其他的深色变体，如：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { darken } from 'polished';\n\nfunction Demo() {\n  const theme = useContext(ThemeContext);\n  const { main } = theme.palette.primary;\n\n  const darkenColor = darken(0.1, main); // 通过增加颜色亮度来加深颜色\n}\n`}</code></pre>\n    <p>{`更多详细介绍见 `}<a parentName=\"p\" {...{\n        \"href\": \"handle-color-by-polished\"\n      }}>{`使用 polished 操纵颜色`}</a>{`。`}</p>\n    <h3 {...{\n      \"id\": \"light-属性\"\n    }}>{`light 属性`}</h3>\n    <p>{`light 属性代表的是此颜色分类的浅色变体。`}</p>\n    <p>{`您也可以通过 `}<a parentName=\"p\" {...{\n        \"href\": \"https://polished.js.org/\"\n      }}>{`polished`}</a>{` 的方法来获取其他的浅色变体，如：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { lighten, opacify } from 'polished';\n\nfunction Demo() {\n  const theme = useContext(ThemeContext);\n  const { main } = theme.palette.primary;\n\n  const lightenColor = lighten(0.1, main); // 通过降低颜色亮度获取浅色变体\n  const lightenColor2 = opacify(-0.9, main); // 通过提升透明度获取浅色变体\n}\n`}</code></pre>\n    <p>{`更多详细介绍见 `}<a parentName=\"p\" {...{\n        \"href\": \"handle-color-by-polished\"\n      }}>{`使用 polished 操纵颜色`}</a>{`。`}</p>\n    <h3 {...{\n      \"id\": \"contrasttext-属性\"\n    }}>{`contrastText 属性`}</h3>\n    <p>{`contrastText 代表的是在背景色是 main 颜色的元素中的文本颜色。这个文本颜色在 Material Design 称之为 `}<inlineCode parentName=\"p\">{`on Color`}</inlineCode>{`，即文本在有颜色背景元素之上的颜色。如下所示：`}</p>\n    <TextOnPrimaryDemo mdxType=\"TextOnPrimaryDemo\" />\n    <p>{`您可以通过 `}<inlineCode parentName=\"p\">{`palette.getContrastText()`}</inlineCode>{` 方法获取任何颜色对应的文本颜色：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const theme = useContext(ThemeContext);\nconst { getContrastText } = theme.palette;\nconst textColor = getContrastText('red'); // 在红色背景上的文本颜色\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"默认的颜色分类值\"\n    }}>{`默认的颜色分类值`}</h3>\n    <PaletteColorDesc mdxType=\"PaletteColorDesc\" />\n    <h3 {...{\n      \"id\": \"切换组件颜色分类\"\n    }}>{`切换组件颜色分类`}</h3>\n    <p>{`大部分使用了颜色分类的组件，允许通过 `}<inlineCode parentName=\"p\">{`color`}</inlineCode>{` 属性来切换颜色分类，如：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React from 'react';\nimport Button from '@sinoui/core/Button';\n\nfunction Demo() {\n  return (\n    <>\n      <Button color=\"primary\">primary按钮</Button>\n      <Button color=\"secondary\">secondary按钮</Button>\n    </>\n  );\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"dark-模式\"\n    }}>{`dark 模式`}</h2>\n    <p>{`@sinoui/theme 默认是 light 模式，同时支持 dark 模式：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { createTheme } from '@sinoui/theme';\n\nconst theme = createTheme({\n  palette: {\n    type: 'dark',\n  },\n});\n`}</code></pre>\n    <p>{`在 dark 模式下，文本、按钮、背景、分割线的颜色都会与 light 模式不同。下面的章节中会分别从 light 和 dark 模式介绍颜色情况。`}</p>\n    <h2 {...{\n      \"id\": \"文本颜色\"\n    }}>{`文本颜色`}</h2>\n    <p>{`您可以通过调色板在您的程序中获取到 Material Design 标准的文本颜色，也可以定制文本颜色。`}</p>\n    <p>{`通过 `}<inlineCode parentName=\"p\">{`palette.text`}</inlineCode>{` 获取到文本颜色对象，它包含以下属性：`}</p>\n    <ul>\n      <li parentName=\"ul\">{`primary - 主文本颜色。应用程序中的大部分文本的颜色。`}</li>\n      <li parentName=\"ul\">{`secondary - 次要文本颜色。如帮助文本的颜色。`}</li>\n      <li parentName=\"ul\">{`disabled - 不可用文本颜色。`}</li>\n    </ul>\n    <p>{`文本颜色支持 `}<inlineCode parentName=\"p\">{`light`}</inlineCode>{` 和 `}<inlineCode parentName=\"p\">{`dark`}</inlineCode>{` 模式。`}</p>\n    <h3 {...{\n      \"id\": \"light-模式下的文本颜色\"\n    }}>{`light 模式下的文本颜色`}</h3>\n    <TypeColorDesc type=\"text\" title=\"Text\" mdxType=\"TypeColorDesc\" />\n    <h3 {...{\n      \"id\": \"dark-模式下的文本颜色\"\n    }}>{`dark 模式下的文本颜色`}</h3>\n    <TypeColorDesc type=\"text\" title=\"Text\" darkMode mdxType=\"TypeColorDesc\" />\n    <h2 {...{\n      \"id\": \"按钮颜色\"\n    }}>{`按钮颜色`}</h2>\n    <p>{`您可以通过 `}<inlineCode parentName=\"p\">{`palette.action`}</inlineCode>{` 获取、定制按钮相关的颜色。按钮颜色对象包含以下属性：`}</p>\n    <ul>\n      <li parentName=\"ul\">{`active - 可用按钮的文本颜色`}</li>\n      <li parentName=\"ul\">{`hover - 鼠标移动到按钮上时的背景色`}</li>\n      <li parentName=\"ul\">{`selected - 按钮被选中时的背景色（如 ButtonGroup）`}</li>\n      <li parentName=\"ul\">{`disabled - 按钮不可用时的文本颜色`}</li>\n      <li parentName=\"ul\">{`disabledBackground - 按钮不用时的背景色`}</li>\n    </ul>\n    <p>{`按钮颜色支持 `}<inlineCode parentName=\"p\">{`light`}</inlineCode>{` 和 `}<inlineCode parentName=\"p\">{`dark`}</inlineCode>{` 模式。`}</p>\n    <h3 {...{\n      \"id\": \"按钮颜色透明度\"\n    }}>{`按钮颜色透明度`}</h3>\n    <p><inlineCode parentName=\"p\">{`palette.action`}</inlineCode>{` 对象除了上面介绍的颜色属性，还有两个透明度属性，它们分别是：`}</p>\n    <ul>\n      <li parentName=\"ul\">{`hoverOpacity - hover 状态下的按钮颜色透明度`}</li>\n      <li parentName=\"ul\">{`selectedOpacity - 选中状态下的按钮颜色透明度`}</li>\n    </ul>\n    <p>{`这些透明度是为了方便在按钮颜色不是默认颜色，而是其他颜色（如主颜色、辅助颜色等）时，计算其 hover、选中状态的按钮背景色。例如：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import styled from 'styled-components';\nimport { opacify } from 'polished';\n\nconst Button = styled.button\\`\n  color: \\${(props) => props.theme.palette.primary.main};\n  &:hover {\n    background: \\${(props) =>\n      opacify(\n        props.theme.palette.action.hoverOpacity - 1,\n        props.theme.palette.primary.main,\n      )};\n  }\n\\`;\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"light-模式下的按钮颜色\"\n    }}>{`light 模式下的按钮颜色`}</h3>\n    <TypeColorDesc type=\"action\" title=\"Buttons\" mdxType=\"TypeColorDesc\" />\n    <h3 {...{\n      \"id\": \"dark-模式下的按钮颜色\"\n    }}>{`dark 模式下的按钮颜色`}</h3>\n    <TypeColorDesc type=\"action\" title=\"Buttons\" darkMode mdxType=\"TypeColorDesc\" />\n    <h2 {...{\n      \"id\": \"背景颜色\"\n    }}>{`背景颜色`}</h2>\n    <p>{`您可以通过 `}<inlineCode parentName=\"p\">{`palette.background`}</inlineCode>{` 获取、定制背景颜色。背景颜色对象包含以下属性：`}</p>\n    <ul>\n      <li parentName=\"ul\">{`default - 默认背景。一般在整个页面设置此颜色`}</li>\n      <li parentName=\"ul\">{`paper - 纸张的背景颜色，如 Card、Paper 等组件`}</li>\n    </ul>\n    <p>{`背景颜色支持 `}<inlineCode parentName=\"p\">{`light`}</inlineCode>{` 和 `}<inlineCode parentName=\"p\">{`dark`}</inlineCode>{` 模式。`}</p>\n    <h3 {...{\n      \"id\": \"light-模式下的背景颜色\"\n    }}>{`light 模式下的背景颜色`}</h3>\n    <TypeColorDesc type=\"background\" title=\"Background\" mdxType=\"TypeColorDesc\" />\n    <h3 {...{\n      \"id\": \"dark-模式下的背景颜色\"\n    }}>{`dark 模式下的背景颜色`}</h3>\n    <TypeColorDesc type=\"background\" title=\"Background\" darkMode mdxType=\"TypeColorDesc\" />\n    <h2 {...{\n      \"id\": \"分割线颜色\"\n    }}>{`分割线颜色`}</h2>\n    <p>{`您可以通过 `}<inlineCode parentName=\"p\">{`palette.divider`}</inlineCode>{` 获取、定制分割线颜色。`}</p>\n    <p>{`分割线颜色支持 `}<inlineCode parentName=\"p\">{`light`}</inlineCode>{` 和 `}<inlineCode parentName=\"p\">{`dark`}</inlineCode>{` 模式。`}</p>\n    <h3 {...{\n      \"id\": \"light-模式下的分割线颜色\"\n    }}>{`light 模式下的分割线颜色`}</h3>\n    <TypeColorDesc type=\"divider\" title=\"Divider\" mdxType=\"TypeColorDesc\" />\n    <h3 {...{\n      \"id\": \"dark-模式下的分割线颜色\"\n    }}>{`dark 模式下的分割线颜色`}</h3>\n    <TypeColorDesc type=\"divider\" title=\"Divider\" darkMode mdxType=\"TypeColorDesc\" />\n    <h2 {...{\n      \"id\": \"定制调色板\"\n    }}>{`定制调色板`}</h2>\n    <p>{`您可以在主题中包含 `}<inlineCode parentName=\"p\">{`palette`}</inlineCode>{` 对象来定制默认的调色板值。例如：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import { createTheme } from '@sinoui/theme';\nimport red from '@sinoui/theme/colors/red';\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: red[500],\n      light: red[300],\n      dark: red[700],\n    },\n    text: {\n      primary: 'rgba(0, 0, 0, 0.92)',\n    },\n  },\n});\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`palette`}</inlineCode>{` 对象中的所有属性均可以一对一覆盖。为了方便设置，提供了简化的颜色分类定制方式，见下一章节的介绍。`}</p>\n    <h3 {...{\n      \"id\": \"定制颜色分类\"\n    }}>{`定制颜色分类`}</h3>\n    <p>{`调色板定制对象中可以接受两种类型的颜色分类值，第一种是颜色分类对象，它的 TypeScript 类型如下：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`interface PaletteColor {\n  main: string;\n  // 不指定，则会自动计算出来\n  light?: string;\n  // 不指定，则会自动计算出来\n  dark?: string;\n  // 不指定，则会自动计算出来\n  contrastText?: string;\n}\n`}</code></pre>\n    <p>{`第二种方式是直接指定颜色对象，如下所示：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { createTheme } from '@sinoui/theme';\nimport red from '@sinoui/theme/colors/red';\n\nconst theme = createTheme({\n  palette: {\n    primary: red,\n  },\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"内置的颜色对象\"\n    }}>{`内置的颜色对象`}</h2>\n    <p>{`@sinoui/theme/colors 中内置了 Material Design 定义的颜色对象。我们可以直接通过颜色名称应用到颜色对象，如：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import red from '@sinoui/theme/colors/red';\nimport green from '@sinoui/theme/colors/green';\n`}</code></pre>\n    <p>{`每个颜色对象都包含有 50, 100, 200, 300, 400, 500, 600, 700, 800, 900, A100, A200, A400, A700 这些主要和强调颜色。我们可以通过这些 SHADE （即 500, 600, A200 ）获取到对应的颜色值，如：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import red from '@sinoui/theme/colors/red';\n\nconst mainColor = red[500];\nconst lightColor = red[300];\nconst darkColor = red[700];\nconst secondaryColor = red.A400;\n`}</code></pre>\n    <p>{`内置的颜色对象如下：`}</p>\n    <ColorPalettes mdxType=\"ColorPalettes\" />\n    <h2 {...{\n      \"id\": \"官方色彩工具\"\n    }}>{`官方色彩工具`}</h2>\n    <p>{`您的应用程序可以直接使用内置的颜色对象来设置调色板，同时也可以通过官方色彩工具使用自定义颜色创建主题调色板。`}</p>\n    <p>{`Material Design 团队提供了一款令人赞叹的调色板配置工具: `}<a parentName=\"p\" {...{\n        \"href\": \"https://material.io/resources/color/\"\n      }}>{`https://material.io/resources/color/`}</a>{` 。它会帮助您为您的 UI 建立自己的色彩集合，同时也会帮助测量每个颜色组合的文本可访问性。`}</p>\n    <p><img alt=\"color tool\" src={require(\"./images/color-tool-default-theme.png\")} /></p>\n    <p>{`颜色工具的颜色值可以直接用在 `}<inlineCode parentName=\"p\">{`createTheme()`}</inlineCode>{` 函数中：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { createTheme } from '@sinoui/theme';\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      light: '#757ce8',\n      main: '#3f50b5',\n      dark: '#002884',\n      contrastText: '#fff',\n    },\n    secondary: {\n      light: '#ff7961',\n      main: '#f44336',\n      dark: '#ba000d',\n      contrastText: '#000',\n    },\n  },\n});\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}