{"version":3,"sources":["D:/Users/jacki/Documents/GitHub/theme/docs/index.mdx"],"names":["layoutProps","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"6TAYMA,EAAc,GAIL,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YALS,UAKT,iBAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,iBAAQ,CACN,GAAM,4BADR,4BAGA,4CAAiB,+BAAGC,WAAW,KAAQ,CACnC,KAAQ,yBADK,mBAAjB,uJAGA,iBAAQ,CACN,GAAM,gBADR,gBAGA,uGACA,sBACE,kBAAIA,WAAW,MAAf,qBAEF,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,yDAIL,sBACE,kBAAIA,WAAW,MAAf,sBAEF,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,+CAIL,iBAAQ,CACN,GAAM,kCADR,kCAGA,2OACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,oXAkBL,qBAAG,0BAAYA,WAAW,KAAvB,cAAH,oGACA,oCAAS,+BAAGA,WAAW,KAAQ,CAC3B,KAAQ,mDADH,kCAAT,8FAGA,iBAAQ,CACN,GAAM,oDADR,oDAGA,2IACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,iLASL,2CACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,sSAcL,iDAAY,0BAAYA,WAAW,KAAvB,eAAZ,yFACA,uJACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,sOAaL,iBAAQ,CACN,GAAM,kCADR,kCAGA,kGAA+B,0BAAYA,WAAW,KAAvB,gBAA/B,0SACA,yHACA,sBACE,kBAAIA,WAAW,MAAK,+BAAGA,WAAW,MAAS,CACvC,KAAQ,aADQ,wBAApB,sHAGA,kBAAIA,WAAW,MAAK,+BAAGA,WAAW,MAAS,CACvC,KAAQ,gBADQ,uCAApB,wIAGA,kBAAIA,WAAW,MAAK,+BAAGA,WAAW,MAAS,CACvC,KAAQ,aADQ,wBAApB,UAGA,kBAAIA,WAAW,MAAK,+BAAGA,WAAW,MAAS,CACvC,KAAQ,iBADQ,4BAApB,UAGA,kBAAIA,WAAW,MAAK,+BAAGA,WAAW,MAAS,CACvC,KAAQ,aADQ,wBAApB,WAIF,8GACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,mUAqBL,iBAAQ,CACN,GAAM,2BADR,2BAGA,uFACA,iDAAY,0BAAYA,WAAW,KAAvB,gBAAZ,wIACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,oO,qKAcTJ,EAAWK,gBAAiB","file":"static/js/docs-index.f3fbe4fb.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"主题定制\"\n    }}>{`主题定制`}</h1>\n    <p>{`sinoui 遵循 `}<a parentName=\"p\" {...{\n        \"href\": \"https://material.io/\"\n      }}>{`Material Design`}</a>{` 设计标准。@sinoui/theme 提供了对标准样式进行自定义的能力。`}</p>\n    <h2 {...{\n      \"id\": \"安装\"\n    }}>{`安装`}</h2>\n    <p>{`执行以下命令即可快速安装：`}</p>\n    <ul>\n      <li parentName=\"ul\">{`使用 npm`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`npm install --save @sinoui/theme styled-components\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`使用 yarn`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`yarn add @sinoui/theme styled-components\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"主题上下文\"\n    }}>{`主题上下文`}</h2>\n    <p>{`要想在应用程序中使用主题，则需要在应用程序入口点文件中定义主题上下文：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import { ThemeProvider } from 'styled-components';\nimport { createTheme, ThemeStyle } from '@sinoui/theme';\n\nconst theme = createTheme(); // 创建主题\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <>\n        <ThemeStyle />\n        {/**应用程序代码**/}\n      </>\n    </ThemeProvider>\n  );\n}\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`ThemeStyle`}</inlineCode>{`组件提供了与主题相关的全局样式。`}</p>\n    <p>{`查看`}<a parentName=\"p\" {...{\n        \"href\": \"#%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%BB%E9%A2%98\"\n      }}>{`自定义主题`}</a>{`，了解更多关于主题定制的细节。`}</p>\n    <h2 {...{\n      \"id\": \"在组件中使用主题\"\n    }}>{`在组件中使用主题`}</h2>\n    <p>{`我们可以在定义样式组件时使用主题对象：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import styled from 'styled-components';\n\nconst Title = styled.h6((props) => ({\n  ...props.theme.typography.subtitle1,\n  color: props.theme.palette.text.primary,\n}));\n`}</code></pre>\n    <p>{`或者：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import styled from 'styled-components';\n\nconst Button = styled.button\\`\n  color: \\${props => props.theme.palette.action.active};\n  &:hover {\n    background-color: \\${props => props.theme.palette.action.hover};\n  }\n  @media (hover: none) {\n    background-color: transparent;\n  }\n\\`;\n`}</code></pre>\n    <p>{`程序中的 `}<inlineCode parentName=\"p\">{`props.theme`}</inlineCode>{` 即是主题上下文中的主题对象。`}</p>\n    <p>{`也可以在普通组件通过上下文获取到主题对象：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React, { useContext } from 'react';\nimport { ThemeContext } from 'styled-components';\n\nfunction MyComponent() {\n  const theme = useContext(ThemeContext);\n\n  console.log('current theme: ', theme);\n\n  // ...\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"自定义主题\"\n    }}>{`自定义主题`}</h2>\n    <p>{`@sinoui/theme 提供了默认的主题对象`}<inlineCode parentName=\"p\">{`defaultTheme`}</inlineCode>{`。但在实际开发过程中，默认主题可能不满足我们的需求，此时就需要我们自定义主题以满足主题切换的效果。`}</p>\n    <p>{`主题对象主要包括以下可定制的点：`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/palette\"\n        }}>{`palette 颜色`}</a>{`。包括字体颜色、背景色、分隔符颜色等。`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/typography\"\n        }}>{`typography 文字排版`}</a>{`。包括字体大小、字体类型、字重、字体颜色等。`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/shadows\"\n        }}>{`shadows 阴影`}</a>{`。`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/transitions\"\n        }}>{`transitions 动效`}</a>{`。`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/spacing\"\n        }}>{`spacing 间距`}</a>{`。`}</li>\n    </ul>\n    <p>{`我们可以调用 createTheme 来创建主题：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { createTheme } from '@sinoui/theme';\n\nconst theme = createTheme({\n  palette: {\n    type: 'dark',\n    primary: pink,\n    secondary: green,\n  },\n  typography: {\n    fontSize: 16,\n    fontWeightMedium: 600,\n    h1: {\n      fontSize: '3rem',\n      fontWeight: 600,\n    },\n  },\n  spacing: 12,\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"typescript-支持\"\n    }}>{`TypeScript 支持`}</h2>\n    <p>{`@sinoui/theme 本身由 typescript 开发。`}</p>\n    <p>{`在项目的 `}<inlineCode parentName=\"p\">{`src/env.d.ts`}</inlineCode>{` 文件中添加以下内容，即可支持 theme 对象的 ts 类型：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`/* eslint-disable @typescript-eslint/no-empty-interface */\nimport 'styled-components';\nimport { Theme } from '@sinoui/theme';\n\ndeclare module 'styled-components' {\n  export interface DefaultTheme extends Theme {}\n}\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}